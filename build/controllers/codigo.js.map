{"version":3,"sources":["../../app/controllers/codigo.js"],"names":["validationOptions","recursive","abortEarly","stripUnknown","solicitarCodigo","stub","args","t0","performance","now","data","codigoPutStatePromises","JSON","parse","toString","err","Error","console","info","embarcador","quantidade","embarcadorSelected","toLowerCase","embarcadorAvailable","includes","organizationMSPID","getCreator","mspid","batch","docType","batchId","codigos","organization","i","codigo","newCodigo","transportador","rota","servico","servico_codigo","usado","newCodigoAsBytes","getState","push","putState","Buffer","from","stringify","Promise","all","batchAsBytes","setEvent","log","t1","usarCodigo","formattedData","usarCodigoSchema","validate","e","message","dataAsBytes","undefined","dataToUpdate","updatedData","updatedDataAsBytes"],"mappings":";;;;;;;kQAAA;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,oBAAoB,EAAEC,WAAW,IAAb,EAAmBC,YAAY,IAA/B,EAAqCC,cAAc,IAAnD,EAA1B;;AAEO,IAAMC,4CAAkB,eAAlBA,eAAkB,CAAOC,IAAP,EAAaC,IAAb,EAAsB;AACnD,MAAMC,KAAKC,wBAAYC,GAAZ,EAAX;;AAEA,MAAIC,aAAJ;AACA,MAAMC,yBAAyB,EAA/B;;AAEA;AACA,MAAI;AACFD,WAAOE,KAAKC,KAAL,CAAWP,KAAKQ,QAAL,EAAX,CAAP;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;AACDC,UAAQC,IAAR,CAAa,+BAAb;;AAEA;AACA,MAAI,EAAER,KAAKS,UAAL,IAAmBT,KAAKU,UAA1B,CAAJ,EAA2C;AACzC,UAAM,IAAIJ,KAAJ,CAAU,qCAAV,CAAN;AACD;AACD;AACA,MAAMK,qBAAqBX,KAAKS,UAAL,CAAgBG,WAAhB,EAA3B;AACA,MAAMC,sBAAsB,CAAC,KAAD,EAAQ,eAAR,EAAyB,gBAAzB,EAA2C,YAA3C,EAAyD,UAAzD,CAA5B;AACA,MAAI,CAACA,oBAAoBC,QAApB,CAA6BH,kBAA7B,CAAL,EAAuD;AACrD,UAAM,IAAIL,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,MAAMS,oBAAoBpB,KAAKqB,UAAL,GAAkBC,KAA5C;;AAEA;AACA,MAAMC,QAAQ;AACZC,aAAS,OADG;AAEZC,aAAS,kBAFG;AAGZC,aAAS,EAHG;AAIZC,kBAAcP;AAJF,GAAd;;AAOA;AACA,OAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIvB,KAAKU,UAAzB,EAAqCa,KAAK,CAA1C,EAA6C;AAC3C,QAAIC,eAAJ;AACA,QAAIC,YAAY,IAAhB;AACA,WAAOA,SAAP,EAAkB;AAChBD,eAAS;AACPL,iBAAS,QADF;AAEPK,gBAAQ,4BAFD;AAGPE,uBAAe,EAHR;AAIPjB,oBAAYT,KAAKS,UAJV;AAKPkB,cAAM,EALC;AAMPC,iBAAS,EANF;AAOPC,wBAAgB,EAPT;AAQPC,eAAO;AACP;AATO,OAAT;;AAYA;AACA;AACA,UAAMC,mBAAmB,MAAMpC,KAAKqC,QAAL,CAAcR,OAAOA,MAArB,CAA/B;AACA;AACA;AACAC,kBAAYM,iBAAiB3B,QAAjB,KAA8B,IAA9B,GAAqC,KAAjD;AACD;AACD;AACAc,UAAMG,OAAN,CAAcY,IAAd,CAAmBT,OAAOA,MAA1B;;AAEA;AACAvB,2BAAuBgC,IAAvB,CAA4BtC,KAAKuC,QAAL,CAAcV,OAAOA,MAArB,EAA6BW,OAAOC,IAAP,CAAYlC,KAAKmC,SAAL,CAAeb,MAAf,CAAZ,CAA7B,CAA5B;AACD;;AAED;AACA,QAAMc,QAAQC,GAAR,CAAYtC,sBAAZ,CAAN;;AAEA;AACA,MAAMuC,eAAeL,OAAOC,IAAP,CAAYlC,KAAKmC,SAAL,CAAenB,KAAf,CAAZ,CAArB;AACA,QAAMvB,KAAKuC,QAAL,CAAchB,MAAME,OAApB,EAA6BoB,YAA7B,CAAN;;AAEA7C,OAAK8C,QAAL,CAAc,cAAd,EAA8BD,YAA9B;AACAjC,UAAQC,IAAR,CAAa,oBAAb;AACAD,UAAQmC,GAAR,CAAYxB,KAAZ;AACAX,UAAQC,IAAR,CAAa,oBAAb;;AAEAD,UAAQC,IAAR,CAAa,uCAAb;;AAEA,MAAMmC,KAAK7C,wBAAYC,GAAZ,EAAX;AACAQ,UAAQmC,GAAR,iBAAyBC,KAAK9C,EAA9B;AACD,CAlFM;;AAoFA,IAAM+C,kCAAa,eAAbA,UAAa,CAAOjD,IAAP,EAAaC,IAAb,EAAsB;AAC9C,MAAII,aAAJ;AACA,MAAI6C,sBAAJ;;AAEA;AACA,MAAI;AACF7C,WAAOE,KAAKC,KAAL,CAAWP,KAAKQ,QAAL,EAAX,CAAP;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAEDC,UAAQC,IAAR,CAAa,yBAAb;;AAEA;AACA,MAAI;AACFqC,oBAAgB,MAAMC,yBAAiBC,QAAjB,CAA0B/C,IAA1B,EAAgCV,iBAAhC,CAAtB;AACD,GAFD,CAEE,OAAO0D,CAAP,EAAU;AACVzC,YAAQmC,GAAR,CAAYM,CAAZ;AACA,UAAM,IAAI1C,KAAJ,CAAU0C,EAAEC,OAAZ,CAAN;AACD;;AAED;AACA,MAAMC,cAAc,MAAMvD,KAAKqC,QAAL,CAAchC,KAAKwB,MAAnB,CAA1B;AACA,MAAI0B,gBAAgBC,SAAhB,IAA6B,CAACD,YAAY9C,QAAZ,EAAlC,EAA0D;AACxD,UAAM,IAAIE,KAAJ,cAAqBN,KAAKwB,MAA1B,uBAAN;AACD;;AAED;AACA,MAAM4B,eAAelD,KAAKC,KAAL,CAAW+C,YAAY9C,QAAZ,EAAX,CAArB;AACA;AACA,MAAIgD,aAAatB,KAAjB,EAAwB;AACtB,UAAM,IAAIxB,KAAJ,cAAqBN,KAAKwB,MAA1B,cAAN;AACD;;AAED;AACA,MAAM6B,2BAAmBD,YAAnB,EAAoCP,aAApC,CAAN;;AAEA;AACA,MAAMS,qBAAqBnB,OAAOC,IAAP,CAAYlC,KAAKmC,SAAL,CAAegB,WAAf,CAAZ,CAA3B;AACA,QAAM1D,KAAKuC,QAAL,CAAcmB,YAAY7B,MAA1B,EAAkC8B,kBAAlC,CAAN;AACA3D,OAAK8C,QAAL,CAAc,aAAd,EAA6Ba,kBAA7B;;AAEA/C,UAAQC,IAAR,CAAa,oBAAb;AACAD,UAAQmC,GAAR,CAAYW,WAAZ;AACA9C,UAAQC,IAAR,CAAa,oBAAb;AACAD,UAAQC,IAAR,CAAa,mBAAb;AACD,CA9CM;;AAgDP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"codigo.js","sourcesContent":["// const config = require('../config.js');\nimport uuidv4 from 'uuid/v4';\nimport { performance } from 'perf_hooks';\nimport { generateCodigo } from '../utils';\nimport { usarCodigoSchema } from '../models/codigo';\n\nconst validationOptions = { recursive: true, abortEarly: true, stripUnknown: true };\n\nexport const solicitarCodigo = async (stub, args) => {\n  const t0 = performance.now();\n\n  let data;\n  const codigoPutStatePromises = [];\n\n  // Parse JSON stringified request\n  try {\n    data = JSON.parse(args.toString());\n  } catch (err) {\n    throw new Error('Não foi possivel decodificar o JSON, por favor verifique o formato');\n  }\n  console.info('--- start solicitarCodigo ---');\n\n  // check mandatory fields\n  if (!(data.embarcador && data.quantidade)) {\n    throw new Error('Por favor preenche campo mandatorio');\n  }\n  // Verify embarcador value\n  const embarcadorSelected = data.embarcador.toLowerCase();\n  const embarcadorAvailable = ['b2w', 'mercado livre', 'magazine luiza', 'via varejo', 'privalia'];\n  if (!embarcadorAvailable.includes(embarcadorSelected)) {\n    throw new Error('Embarcador nao disponivel');\n  }\n\n  const organizationMSPID = stub.getCreator().mspid;\n\n  // Create batch\n  const batch = {\n    docType: 'batch',\n    batchId: uuidv4(),\n    codigos: [],\n    organization: organizationMSPID\n  };\n\n  // Create tracking code\n  for (let i = 0; i < data.quantidade; i += 1) {\n    let codigo;\n    let newCodigo = true;\n    while (newCodigo) {\n      codigo = {\n        docType: 'codigo',\n        codigo: generateCodigo(),\n        transportador: '',\n        embarcador: data.embarcador,\n        rota: '',\n        servico: '',\n        servico_codigo: '',\n        usado: false\n        // status: 1\n      };\n\n      // verify if codigo already exist\n      /* eslint no-await-in-loop: \"off\" */\n      const newCodigoAsBytes = await stub.getState(codigo.codigo);\n      // Generate a new code if codigo already exist\n      /* eslint no-unneeded-ternary: \"off\" */\n      newCodigo = newCodigoAsBytes.toString() ? true : false;\n    }\n    // Push to batch\n    batch.codigos.push(codigo.codigo);\n\n    // Put codigo to ledger\n    codigoPutStatePromises.push(stub.putState(codigo.codigo, Buffer.from(JSON.stringify(codigo))));\n  }\n\n  // Wait for all codigo putState promise\n  await Promise.all(codigoPutStatePromises);\n\n  // Put batch to ledger\n  const batchAsBytes = Buffer.from(JSON.stringify(batch));\n  await stub.putState(batch.batchId, batchAsBytes);\n\n  stub.setEvent('batchCreated', batchAsBytes);\n  console.info('==================');\n  console.log(batch);\n  console.info('==================');\n\n  console.info('--- end create codigoRastreamento ---');\n\n  const t1 = performance.now();\n  console.log(`Call took ${t1 - t0} ms.`);\n};\n\nexport const usarCodigo = async (stub, args) => {\n  let data;\n  let formattedData;\n\n  // Parse JSON stringified request\n  try {\n    data = JSON.parse(args.toString());\n  } catch (err) {\n    throw new Error('Não foi possivel decodificar o JSON, por favor verifique o formato');\n  }\n\n  console.info('--- start usoCodigo ---');\n\n  // Verify data format\n  try {\n    formattedData = await usarCodigoSchema.validate(data, validationOptions);\n  } catch (e) {\n    console.log(e);\n    throw new Error(e.message);\n  }\n\n  // Verify if data exists\n  const dataAsBytes = await stub.getState(data.codigo);\n  if (dataAsBytes === undefined || !dataAsBytes.toString()) {\n    throw new Error(`\"codigo ${data.codigo} nao encontrado\";`);\n  }\n\n  // Parse data that will be updated\n  const dataToUpdate = JSON.parse(dataAsBytes.toString());\n  // Verify if not used\n  if (dataToUpdate.usado) {\n    throw new Error(`\"codigo ${data.codigo} usado\";`);\n  }\n\n  // Merge formatted data\n  const updatedData = { ...dataToUpdate, ...formattedData };\n\n  // 8. Put unidadeTransporte in the Ledger & send event\n  const updatedDataAsBytes = Buffer.from(JSON.stringify(updatedData));\n  await stub.putState(updatedData.codigo, updatedDataAsBytes);\n  stub.setEvent('codigoUsado', updatedDataAsBytes);\n\n  console.info('==================');\n  console.log(updatedData);\n  console.info('==================');\n  console.info('--- usoCodigo ---');\n};\n\n// POST /uso-codigo/BR9380921SW\n\n// {\n//   \"transportador\":62,\n//   \"embarcador\":1,\n//   \"rota\": \"BLU-BRS\",\n//   \"servico\": \"SEDEX\",\n//   \"servico_code\": \"81983\",\n//   \"usado\": \"2019-12-12 12:12:00\"\n// }\n\n// DIGITS => Formato\n// 1-2 => [AZ] (aleatorio)\n// 3-10 => [0-9] (aleatorio)\n// 11 => [0-9] (check Digit)\n// 12-13 => [AZ] (aleatorio - menos \"BR\")\n\n// GET /codigos_rastreamento/12\n\n// ATIVO\n\n// status: 1 => criado\n// status: 2 => usado\n// status: 3 => Expirado\n// status: 4 => Arquivado\n\n// Front da Demo do código de Rastreamento:\n\n// [Overview]\n// Igual no demo hoje\n\n// [Gerar Código]\n// - Dropdown de \"Embarcador\" com 5 opções: B2W, Mercado Livre, Magazine Luiza, Via Varejo, Privalia\"\n// - Input de \"Quantidade\"\n\n// Resultado\n// - lista de Códigos gerados\n\n// [Usar Codigo]\n// - Dropdown dos Embarcadores (Mercado livre, etc)\n\n// Depois a seleção apararece  uma lista de Códigos disponíveis\n\n// Pode clicar em um código e preencher as informações necessários e gravar.\n\n// ------------------\n// quick obervacao, quando a gente cria codigo tem dois jeito pra fazer\n\n// 1. criar um codigo sem verificacao (por 20 codigo 9.39695700071752 ms)\n// 2. criar um codigo é verifica se exist na blockchain (por 3 codigos 71.542519999668 ms)\n\n// let codeGenerated;\n// let existingCode = true;\n// while (existingCode) {\n//   codeGenerated = generateCode();\n//   // Verify if code exist after generating\n//   /* eslint no-await-in-loop: \"off\" */\n//   const codeGeneratedAsBytes = await stub.getState(codeGenerated);\n//   /* eslint no-unneeded-ternary: \"off\" */\n//   existingCode = codeGeneratedAsBytes.toString() ? true : false; // loop until does not exist\n// }\n\n// Solucao 1:\n// Criar um batch de codigo com um idBatch, codigo nao cadastrado na blockchain, cadastrado quando usa uso-codigo\n// vantagem: Podemos verificar se o codigo existe na funcao uso-codigo (por 20 codigo 9.39695700071752 ms)\n// {\n//   idBatch: 1,\n//   \"codigos\": [\n//     \"BR9380921SW\",\n//     \"BR838838SW\",\n//     \"BR9380921SWs\",\n//   ],\n//   \"quantidade\": 3,\n//   \"criado\": \"2018-12-12 12:12:00\"\n// }\n\n// Solucao 2:\n// Criar cada codigo e cadastra na blockchain é mandar formato tipo encima (com status criado)\n// desvantagem: precisa ver se a cada se ja é cadastrado (71.542519999668 ms por 20 codigo)\n// {\n//   \"id\": \"BR9380921SW\"\n//   \"organization\":1,\n//   \"rota\": \"BLU-BRS\",\n//   \"servico\": \"SEDEX\",\n//   \"servico_code\": \"81983\",\n//   \"usado\": \"2019-12-12 12:12:00\"\n//   \"status\": 2\n// }\n"]}