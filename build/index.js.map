{"version":3,"sources":["../app/index.js"],"names":["Codigo","Chaincode","stub","ret","getFunctionAndParameters","console","info","shim","success","getTxID","util","format","getArgs","method","fcn","message","log","error","payload","params","err","args","thisClass","data","Error","dataAsBytes","getState","toString","solicitarCodigo","e","usarCodigo","length","queryString","queryResults","iterator","isHistory","allResults","res","next","value","jsonResponse","TxId","tx_id","Timestamp","timestamp","IsDelete","is_delete","Value","JSON","parse","Key","key","Record","push","done","close","stringify","resultsIterator","getQueryResult","results","Buffer","from","id","getHistoryForKey","start"],"mappings":"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","file":"index.js","sourcesContent":["/*\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n*/\nimport shim from 'fabric-shim';\nimport util from 'util';\nimport * as Codigo from './controllers/codigo';\n\nexport default class Chaincode {\n  async Init(stub) {\n    const ret = stub.getFunctionAndParameters();\n    console.info(ret);\n    console.info('=========== Instantiated Logistic Chaincode ===========');\n    return shim.success();\n  }\n\n  async Invoke(stub) {\n    console.info('########################################');\n    console.info(`Transaction ID: ${stub.getTxID()}`);\n    console.info(util.format('Args: %j', stub.getArgs()));\n\n    const ret = stub.getFunctionAndParameters();\n    console.info(ret);\n\n    const method = this[ret.fcn];\n    if (!method) {\n      const message = `funcao com nome ${ret.fcn} nao encontrado`;\n      console.log(message);\n      return shim.error(message);\n    }\n    try {\n      const payload = await method(stub, ret.params, this);\n      return shim.success(payload);\n    } catch (err) {\n      console.log(err);\n      return shim.error(err.message ? err.message : err);\n    }\n  }\n\n  async getDataById(stub, args, thisClass) {\n    // 1. Verify id is not empty\n    const data = args[0];\n    if (!data) {\n      throw new Error('Por favor especifique um id');\n    }\n\n    console.info('--- start getData ---');\n\n    // 2. Verify if batch exist\n    const dataAsBytes = await stub.getState(data);\n    if (!dataAsBytes.toString()) {\n      throw new Error(`\"Data com id ${data} nao encontrado\"`);\n    }\n\n    console.info('==================');\n    console.log(dataAsBytes.toString());\n    console.info('==================');\n    console.info('--- end getData ---');\n\n    return dataAsBytes;\n  }\n\n  async solicitarCodigo(stub, args, thisClass) {\n    try {\n      await Codigo.solicitarCodigo(stub, args);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async usarCodigo(stub, args, thisClass) {\n    try {\n      await Codigo.usarCodigo(stub, args);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  // Rich Query (Only supported if CouchDB is used as state database):\n  // peer chaincode query -C myc -n mycc -c\n  // '{\"Args\":[\"richQuery\",\"{\\\"selector\\\":{\\\"status\\\":\\\"1\\\"}}\"]}'\n  async richQuery(stub, args, thisClass) {\n    //   0\n    // 'queryString'\n    if (args.length < 1) {\n      throw new Error('Incorrect number of arguments. Expecting queryString');\n    }\n    const queryString = args[0];\n    if (!queryString) {\n      throw new Error('queryString must not be empty');\n    }\n    const method = thisClass[\"getQueryResultForQueryString\"];\n    const queryResults = await method(stub, queryString, thisClass);\n    return queryResults;\n  }\n\n  async getAllResults(iterator, isHistory) {\n    console.log('using getAllResults');\n    const allResults = [];\n    while (true) {\n      /* eslint no-await-in-loop: \"off\" */\n      const res = await iterator.next();\n\n      if (res.value && res.value.value.toString()) {\n        const jsonResponse = {};\n        // console.log(res.value.value.toString(\"utf8\"));\n\n        if (isHistory && isHistory === true) {\n          jsonResponse.TxId = res.value.tx_id;\n          jsonResponse.Timestamp = res.value.timestamp;\n          jsonResponse.IsDelete = res.value.is_delete.toString();\n          try {\n            jsonResponse.Value = JSON.parse(res.value.value.toString('utf8'));\n          } catch (err) {\n            console.log(err);\n            jsonResponse.Value = res.value.value.toString('utf8');\n          }\n        } else {\n          jsonResponse.Key = res.value.key;\n          try {\n            jsonResponse.Record = JSON.parse(res.value.value.toString('utf8'));\n          } catch (err) {\n            console.log(err);\n            jsonResponse.Record = res.value.value.toString('utf8');\n          }\n        }\n        allResults.push(jsonResponse);\n      }\n      if (res.done) {\n        console.log('end of data');\n        await iterator.close();\n        console.info(JSON.stringify(allResults));\n        return allResults;\n      }\n    }\n  }\n\n  // getQueryResultForQueryString executes the passed in query string.\n  // Result set is built and returned as a byte array containing the JSON results.\n  async getQueryResultForQueryString(stub, queryString, thisClass) {\n    console.info(`- getQueryResultForQueryString queryString:\\n ${queryString}`);\n    const resultsIterator = await stub.getQueryResult(queryString);\n    const method = thisClass[\"getAllResults\"];\n\n    const results = await method(resultsIterator, false);\n\n    return Buffer.from(JSON.stringify(results));\n  }\n\n  async getHistory(stub, args, thisClass) {\n    if (args.length < 1) {\n      throw new Error('Incorrect number of arguments. Expecting an id to look for');\n    }\n    const id = args[0];\n    console.info(`--- start getHistoryFor:\\n ${id}`);\n\n    const resultsIterator = await stub.getHistoryForKey(id);\n    const method = thisClass[\"getAllResults\"];\n\n    const results = await method(resultsIterator, true);\n    return Buffer.from(JSON.stringify(results));\n  }\n}\n\nshim.start(new Chaincode());\n"]}