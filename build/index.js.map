{"version":3,"sources":["../app/index.js"],"names":["Codigo","Chaincode","stub","ret","getFunctionAndParameters","console","info","shim","success","getTxID","util","format","getArgs","method","fcn","log","message","error","payload","params","err","args","solicitarCodigo","e","length","Error","queryString","getQueryResultForQueryString","queryResults","resultsIterator","getQueryResult","getAllResults","results","Buffer","from","JSON","stringify","id","getHistoryForKey","iterator","isHistory","allResults","res","next","value","toString","jsonResponse","TxId","tx_id","Timestamp","timestamp","IsDelete","is_delete","Value","parse","Key","key","Record","push","done","close","start"],"mappings":"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","file":"index.js","sourcesContent":["/*\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n*/\nimport shim from 'fabric-shim';\nimport util from 'util';\nimport * as Codigo from './controllers/codigo';\n\nexport default class Chaincode {\n  async Init(stub) {\n    const ret = stub.getFunctionAndParameters();\n    console.info(ret);\n    console.info('=========== Instantiated Logistic Chaincode ===========');\n    return shim.success();\n  }\n\n  async Invoke(stub) {\n    console.info('########################################');\n    console.info(`Transaction ID: ${stub.getTxID()}`);\n    console.info(util.format('Args: %j', stub.getArgs()));\n\n    const ret = stub.getFunctionAndParameters();\n    console.info(ret);\n\n    const method = this[ret.fcn];\n    console.log(method);\n    if (!method) {\n      const message = `funcao com nome ${ret.fcn} nao encontrado`;\n      console.log(message);\n      return shim.error(message);\n    }\n    try {\n      const payload = await method(stub, ret.params);\n      return shim.success(payload);\n    } catch (err) {\n      console.log(err);\n      return shim.error(err.message ? err.message : err);\n    }\n  }\n\n  async solicitarCodigo(stub, args) {\n    try {\n      await Codigo.solicitarCodigo(stub, args);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  // Rich Query (Only supported if CouchDB is used as state database):\n  // peer chaincode query -C myc -n mycc -c\n  // '{\"Args\":[\"richQuery\",\"{\\\"selector\\\":{\\\"status\\\":\\\"1\\\"}}\"]}'\n  async richQuery(stub, args) {\n    //   0\n    // 'queryString'\n    if (args.length < 1) {\n      throw new Error('Incorrect number of arguments. Expecting queryString');\n    }\n    const queryString = args[0];\n    if (!queryString) {\n      throw new Error('queryString must not be empty');\n    }\n    const method = this.getQueryResultForQueryString;\n    const queryResults = await method(stub, queryString);\n    return queryResults;\n  }\n\n  static async getAllResults(iterator, isHistory) {\n    const allResults = [];\n    while (true) {\n      const res = await iterator.next();\n\n      if (res.value && res.value.value.toString()) {\n        const jsonResponse = {};\n        // console.log(res.value.value.toString(\"utf8\"));\n\n        if (isHistory && isHistory === true) {\n          jsonResponse.TxId = res.value.tx_id;\n          jsonResponse.Timestamp = res.value.timestamp;\n          jsonResponse.IsDelete = res.value.is_delete.toString();\n          try {\n            jsonResponse.Value = JSON.parse(res.value.value.toString('utf8'));\n          } catch (err) {\n            console.log(err);\n            jsonResponse.Value = res.value.value.toString('utf8');\n          }\n        } else {\n          jsonResponse.Key = res.value.key;\n          try {\n            jsonResponse.Record = JSON.parse(res.value.value.toString('utf8'));\n          } catch (err) {\n            console.log(err);\n            jsonResponse.Record = res.value.value.toString('utf8');\n          }\n        }\n        allResults.push(jsonResponse);\n      }\n      if (res.done) {\n        console.log('end of data');\n        await iterator.close();\n        console.info(JSON.stringify(allResults));\n        return allResults;\n      }\n    }\n  }\n\n  // getQueryResultForQueryString executes the passed in query string.\n  // Result set is built and returned as a byte array containing the JSON results.\n  async getQueryResultForQueryString(stub, queryString) {\n    console.info(`- getQueryResultForQueryString queryString:\\n + ${queryString}`);\n    const resultsIterator = await stub.getQueryResult(queryString);\n    const method = this.getAllResults;\n\n    const results = await method(resultsIterator, false);\n\n    return Buffer.from(JSON.stringify(results));\n  }\n\n  async getHistory(stub, args) {\n    if (args.length < 1) {\n      throw new Error('Incorrect number of arguments. Expecting an id to look for');\n    }\n    const id = args[0];\n    console.info('--- start getHistoryFor: %s\\n');\n\n    const resultsIterator = await stub.getHistoryForKey(id);\n    const method = this.getAllResults;\n    const results = await method(resultsIterator, true);\n\n    return Buffer.from(JSON.stringify(results));\n  }\n}\n\nshim.start(new Chaincode());\n"]}